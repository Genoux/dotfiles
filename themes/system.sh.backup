#!/bin/bash

# System Theme Manager - Stow-based theme switching
# Usage: ./system.sh [list|setup|switch <theme>]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THEMES_DIR="$SCRIPT_DIR"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"
APPS_CONFIG="$SCRIPT_DIR/apps.json"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[SYSTEM]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Get current active theme (check which theme is applied)
get_current_theme() {
    if [[ ! -d "$HOME/.config/themes/current" ]]; then
        echo "none"
        return
    fi
    
    # Try to determine current theme by comparing file contents
    for theme_dir in "$THEMES_DIR"/*; do
        if [[ -d "$theme_dir" ]]; then
            local theme_name=$(basename "$theme_dir")
            [[ "$theme_name" == "apps" ]] && continue
            
            # Check if any file matches
            local matches=0
            local total=0
            for file in "$theme_dir"/*; do
                if [[ -f "$file" ]]; then
                    local basename=$(basename "$file")
                    local current_file="$HOME/.config/themes/current/$basename"
                    ((total++))
                    if [[ -f "$current_file" ]] && cmp -s "$file" "$current_file"; then
                        ((matches++))
                    fi
                fi
            done
            
            # If all files match, this is the current theme
            if [[ $matches -gt 0 && $matches -eq $total ]]; then
                echo "$theme_name"
                return
            fi
        fi
    done
    
    echo "unknown"
}

# List all available themes with status
list_themes() {
    local current_theme=$(get_current_theme)
    
    echo -e "${BLUE}ðŸ“‹ Available System Themes:${NC}"
    echo
    
    # Look for theme folders in dotfiles/themes/
    for theme_dir in "$THEMES_DIR"/*; do
        if [[ -d "$theme_dir" ]]; then
            local theme_name=$(basename "$theme_dir")
            
            # Skip non-theme directories
            [[ "$theme_name" == "apps" ]] && continue
            
            if [[ "$theme_name" == "$current_theme" ]]; then
                echo -e "  ${GREEN}âœ“ $theme_name${NC}"
            else
                echo -e "    $theme_name"
            fi
        fi
    done
}

# Switch to a theme
switch_theme() {
    local theme_name="$1"
    
    if [[ -z "$theme_name" ]]; then
        error "Theme name required"
        echo "Usage: $0 switch <theme_name>"
        return 1
    fi
    
    if [[ ! -d "$THEMES_DIR/$theme_name" ]]; then
        error "Theme '$theme_name' not found in $THEMES_DIR"
        return 1
    fi
    
    log "Switching to theme: $theme_name"
    
    # Create target directory
    mkdir -p "$HOME/.config/themes/current"
    
    # Copy all theme files dynamically based on app configuration
    for file in "$THEMES_DIR/$theme_name"/*; do
        if [[ -f "$file" ]]; then
            local basename=$(basename "$file")
            local app_name="${basename%.*}"
            
            # Get app configuration from apps.json
            local app_config=$(jq -r ".apps.\"$app_name\"" "$APPS_CONFIG" 2>/dev/null)
            
            if [[ "$app_config" == "null" || -z "$app_config" ]]; then
                # Default: centralized for unknown apps
                cp "$file" "$HOME/.config/themes/current/"
                log "Copied $app_name theme (default: centralized)"
            else
                local app_type=$(echo "$app_config" | jq -r '.type')
                
                case "$app_type" in
                    "direct")
                        local target=$(echo "$app_config" | jq -r '.target' | sed "s|~|$HOME|g")
                        local target_dir=$(dirname "$target")
                        mkdir -p "$target_dir"
                        cp "$file" "$target"
                        log "Applied $app_name theme directly to $target"
                        ;;
                    "themes_dir")
                        local target=$(echo "$app_config" | jq -r '.target' | sed "s|~|$HOME|g")
                        local target_dir=$(dirname "$target")
                        mkdir -p "$target_dir"
                        cp "$file" "$target"
                        log "Applied $app_name theme to themes directory"
                        ;;
                    "centralized"|*)
                        cp "$file" "$HOME/.config/themes/current/"
                        log "Copied $app_name theme (centralized)"
                        ;;
                esac
            fi
        fi
    done
    
    success "Switched to theme: $theme_name"
    echo
    echo -e "${YELLOW}Restart applications to apply changes:${NC}"
}

# Setup theme system (create directories, stow configs)
setup_themes() {
    log "Setting up theme system..."
    
    # Create theme directory if it doesn't exist
    if [[ ! -d "$THEMES_DIR" ]]; then
        mkdir -p "$THEMES_DIR"
        log "Created theme directory: $THEMES_DIR"
    fi
    
    # Recreate theme files if they don't exist
    if [[ ! -d "$THEMES_DIR/dark" ]]; then
        log "Creating default 'dark' theme..."
        mkdir -p "$THEMES_DIR/dark"
        
        # Create AGS theme
        cat > "$THEMES_DIR/dark/ags.scss" << 'EOF'
// Dark theme for AGS - Simplified and clean
$bg: rgba(25,25,28,1);
$bg-card: rgba(38,38,42,0.9);
$fg: rgba(250,250,250,1);
$fg-dim: rgba(220,220,220,0.8);
$accent: rgba(180,180,180,1);
$border: rgba(255,255,255,0.1);
$red: rgba(255,100,100,1);
$green: rgba(100,200,100,1);

@mixin reset {
  all: unset;
  padding: 0;
  margin: 0;
  border: none;
  background: transparent;
  color: inherit;
}

@mixin card($padding: 8px) {
  background: $bg-card;
  border: 1px solid $border;
  border-radius: 8px;
  padding: $padding;
}

@mixin button {
  @include reset;
  padding: 4px 8px;
  border-radius: 4px;
  transition: all 0.1s;
  &:hover { background: rgba(255,255,255,0.05); }
}

@mixin hover {
  transition: all 0.1s;
  &:hover { background: rgba(255,255,255,0.05); }
}

// Keep existing spacing/radius variables (they're good)
$spacing-xs: 2px; $spacing-sm: 4px; $spacing-base: 6px; $spacing-md: 8px;
$spacing-lg: 12px; $spacing-xl: 16px; $spacing-2xl: 24px;
$radius-xs: 4px; $radius-sm: 6px; $radius-md: 8px; $radius-lg: 12px; $radius-xl: 16px;
$border-width: 1px; $transition-fast: 0.1s ease-in-out;
$font-size-xs: 10px; $font-size-sm: 12px; $font-size-md: 13px; $font-size-lg: 14px; $font-size-xl: 16px;
EOF

        # Create Hyprland theme
        cat > "$THEMES_DIR/dark/hypr.conf" << 'EOF'
# Dark theme for Hyprland
general {
    col.active_border = rgba(255,255,255,0.1)
    col.inactive_border = rgba(255,255,255,0.05)
}

decoration {
    rounding = 8
    drop_shadow = true
    shadow_range = 4
    shadow_render_power = 3
    col.shadow = rgba(0,0,0,0.3)
}
EOF

        # Create Kitty theme
        cat > "$THEMES_DIR/dark/kitty.conf" << 'EOF'
# Dark theme for Kitty
foreground              #fafafa
background              #191916
selection_foreground    #191916
selection_background    #b4b4b4
cursor                  #fafafa
cursor_text_color       #191916

# Normal colors
color0   #262622
color1   #ff6464
color2   #64c864
color3   #ffdc50
color4   #9696c8
color5   #dcdc64
color6   #b4b4b4
color7   #fafafa

# Bright colors  
color8   #dcdc64
color9   #ff6464
color10  #64c864
color11  #ffdc50
color12  #9696c8
color13  #dcdc64
color14  #b4b4b4
color15  #fafafa

active_tab_foreground   #fafafa
active_tab_background   #262622
inactive_tab_foreground #dcdc64
inactive_tab_background #191916
EOF
        
        success "Created default 'dark' theme"
    fi
    
    # Set current theme if not set
    if [[ ! -L "$THEMES_DIR/current" ]]; then
        cd "$THEMES_DIR" && ln -sf dark current
        log "Set 'dark' as current theme"
    fi
    
    success "Theme system ready!"
}

# Main command handling
case "$1" in
    list|"")
        list_themes
        ;;
    setup)
        setup_themes
        ;;
    switch)
        switch_theme "$2"
        ;;
    *)
        echo "Usage: $0 {list|setup|switch <theme>}"
        echo
        echo "Commands:"
        echo "  list     - List all available themes"
        echo "  setup    - Initialize theme system"  
        echo "  switch   - Switch to specified theme"
        exit 1
        ;;
esac
